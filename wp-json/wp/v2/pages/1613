{"id":1613,"date":"2014-11-20T14:17:49","date_gmt":"2014-11-20T14:17:49","guid":{"rendered":"https:\/\/readysaltedcode-wordpress.appspot.com\/lesson-for-rpi-and-momentary-push-button\/"},"modified":"2014-11-20T14:17:49","modified_gmt":"2014-11-20T14:17:49","slug":"lesson-for-rpi-and-momentary-push-button","status":"publish","type":"page","link":"http:\/\/www.readysaltedcode.org\/lesson-for-rpi-and-momentary-push-button\/","title":{"rendered":"Lesson for RPi and Momentary Push Button"},"content":{"rendered":"<h3><span style=\"color: #808080;\">NOTE: Scratch GPIO is being Updated at the time of writing. \u00a0(Lesson will be updated once software is released)<\/span><\/h3>\n<p><a title=\"RPi-ano | RPi + Momentary Push Buttons\" href=\"\/rpiano\/\">Link to main project page<\/a><\/p>\n<h2><span style=\"color: #000080;\"><strong>Overview:<\/strong><\/span><\/h2>\n<p>This is a Scratch\u00a0\u00a0GPIO\u00a0coding project using the RPi and\u00a0Push Buttons\u00a0on the duration of your lesson this project should take 1-3 lessons (1 hour per lesson).<\/p>\n<p>This works well in pairs or small groups depending on the number of students and the equipment that you have available.<\/p>\n<h2><span style=\"color: #000080;\">Kit List:<\/span><\/h2>\n<p>RPi<br \/>\nMomentary Push Button (5)<br \/>\nJumper cables male to Female solderless<br \/>\nResistors 1K<br \/>\nGPIO expansion cable optional<br \/>\nSolderless Breadboard \u00a0l<em>arge enough for the buttons<\/em><\/p>\n<p>Starter<\/p>\n<ul>\n<li>5-10 mins\u00a0Play video of completed kit or demonstrate one that is already completed<\/li>\n<li>Or hand out\u00a0<a href=\"http:\/\/artofcs-123.appspot.com.storage.googleapis.com\/RPiano-Worksheet.pdf\">RPiano Worksheet<\/a>\u00a0and push buttons per group\u00a0or individual . <span style=\"color: #008000;\"><strong>Question: What can you do\/make with this BUTTON?\u00a0<\/strong><span style=\"color: #000000;\">\u00a0Get the students to be creative, the more bonkers the idea the better. By asking this question at the beginning they are not limited by the current abilities for hardware or coding. \u00a0<\/span><\/span><\/li>\n<\/ul>\n<p><a href=\"https:\/\/flic.kr\/p\/pFeA7k\"><img loading=\"lazy\" src=\"https:\/\/farm8.staticflickr.com\/7482\/15540200207_b688874fc3_z.jpg\" alt=\"Screen Shot 2014-10-20 at 11.58.07\" width=\"541\" height=\"360\" \/><\/a><\/p>\n<p>&nbsp;<\/p>\n<h2><span style=\"color: #000080;\">Main &#8211; Wire Up \/ Code It<\/span><\/h2>\n<p>This activity should take between 40-60mins depending size class, experience and dexterity. This can be spilt into 2 lesson one focusing on the circuit \/ build and the other focusing on the code. Take your time.<\/p>\n<h3><span style=\"color: #000080;\">Activity 1<\/span><\/h3>\n<p>Hand out <a href=\"http:\/\/artofcs-123.appspot.com.storage.googleapis.com\/RPiano-Worksheet.pdf\">RPiano Worksheet<\/a>\u00a0and ask the students (in pairs) to work out how to wire up the RPi to the breadboard. Use multiple colours if you have them. Use the Black for Ground, Red for Power and Blue or Green for the GPIO pins. Be consistent with your choice of colours. \u00a0 Check out Jumper (hook-up)cables for more information. \u00a0Students may wish to label each wire for each button. \u00a0This helps if you have a large gap between lessons and you wish to continue the project over more than one lesson.<\/p>\n<ul>\n<li>If this is the very first time students have seen an RPi or any wiring diagrams then go through <a title=\"Resistors\" href=\"\/resistors\/\" target=\"_blank\">RESISTORS<\/a> and <a title=\"GPIO\" href=\"\/gpio\/\" target=\"_blank\">GPIO<\/a> first. \u00a0See scratch animation about <a href=\"http:\/\/scratch.mit.edu\/projects\/29670172\/\">resistors<\/a>. Get the students to create a short animation \/ image or other explaining briefly\u00a0in their own words what resistors \/ GPIO are. This work may be used for classroom \/ online displays to show what the students have been learning in class.<\/li>\n<\/ul>\n<p>This project works well by building a smaller single button circuit first and the allowing the students to continue creating the RPI-ano independently until that have a adding all the buttons.<\/p>\n<h3><span style=\"color: #000080;\">Activity 2<\/span><\/h3>\n<h3><span style=\"color: #000080;\">Raspberry Pi Pin name and numbering:<\/span><\/h3>\n<p>This activity is to get the students familiar with the names of the names and their corresponding PIN location. \u00a0The PIN name is important as these terms are used for higher level projects and will also be in the updated version of Scratch GPIO for RPI once it is released.<\/p>\n<p>Below in image one we can the see a single LED and resistor attached to the RPI using the GPIO pins. \u00a0This <a href=\"http:\/\/pi.gadgetoid.com\/pinout\" target=\"_blank\">site<\/a> has great interactive RPI Pin diagram <span style=\"color: #999999;\"><em>(link opens another tab). \u00a0<\/em><span style=\"color: #000000;\">This is a fabulous resource to use to introduce GPIO pins\u00a0to your students.<\/span><\/span><\/p>\n<div style=\"width: 574px\" class=\"wp-caption alignnone\"><img loading=\"lazy\" class=\"\" src=\"http:\/\/www.raspberrypi.org\/documentation\/usage\/gpio\/images\/gpio-led.png\" alt=\"RPi GPIO with LED\" width=\"564\" height=\"424\" \/><p class=\"wp-caption-text\">Image 1 RPi GPIO with LED<\/p><\/div>\n<div style=\"width: 1010px\" class=\"wp-caption alignnone\"><img loading=\"lazy\" class=\"\" src=\"http:\/\/www.raspberrypi.org\/documentation\/usage\/gpio\/images\/basic-gpio-layout.png\" alt=\"RPI GPIO pin layout\" width=\"1000\" height=\"439\" \/><p class=\"wp-caption-text\">Image 2 RPI GPIO pin layout<\/p><\/div>\n<p>&nbsp;<\/p>\n<h2><span style=\"color: #000080;\">Activity 3 Single button circuit<\/span><\/h2>\n<p><a href=\"https:\/\/flic.kr\/p\/pFb3cX\"><img loading=\"lazy\" src=\"https:\/\/farm6.staticflickr.com\/5612\/15539507549_863d885ac7_z.jpg\" alt=\"IMG_0275\" width=\"640\" height=\"480\" \/><\/a><\/p>\n<ul>\n<li>Wire up just the push buttons to the RPI or via the GPIO expansion cable (as seen in the image above)\n<ul>\n<li>Students to write pseudo code (or animation) of how they think it work<\/li>\n<\/ul>\n<\/li>\n<li>Once complete\u00a0run the code to test the\u00a0the push button\n<ul>\n<li>Students to write pseudo code (or animation) of how they think it work<\/li>\n<li>The scratch code below shows three different PINS in use. \u00a0They are using broadcast to activate the code and play a sound\/ animation on screen. \u00a0This could also be used to turn on LEDS as an extension activity.<\/li>\n<li><a href=\"https:\/\/flic.kr\/p\/pFgso3\"><img loading=\"lazy\" src=\"https:\/\/farm8.staticflickr.com\/7507\/15540564430_119f9343d4_c.jpg\" alt=\"Rpi-ano Scratch Code2\" width=\"600\" height=\"800\" \/><\/a><\/li>\n<\/ul>\n<\/li>\n<\/ul>\n<h3><span style=\"color: #000080;\">Activity 4 Adding all the Buttons<\/span><\/h3>\n<ul>\n<li>Build the complete circuit using the wiring diagram<\/li>\n<li>Create pseudo code \/ animations that explain how they think code works.<\/li>\n<li>Run the RPi-ano\u00a0Code: Playing Sounds.<\/li>\n<li>Students to record their own sounds or modify the ones in the scratch file.<\/li>\n<li>Run the Blink Code: LEDS to light up<\/li>\n<\/ul>\n<p>Decide which option you are going to use and state (display on the board) this to the class or let the students decide depending on their age\/ ability and class size.<\/p>\n<p>Hand out the kit for each group\/ pair or individual. (RPI, Breadboard, Ultrasonic sensor, jumper cables, LEDs and resistors). Give the students plenty of time wire this up. \u00a0It can be very &#8216;fiddly&#8217; with the small components and this can lead to some students feeling a little frustrated. If this is the case then give them another set of cables\/ breadboard\/ resistors to practice on while the &#8216;group&#8217; finish the circuit. If there are no spare kits\/ resources then get some students to be journalist and document the whole process with pictures video and interviews. During this time some students can be working on the code while others are building the circuit.<\/p>\n<h3><span style=\"color: #000080;\">Code<\/span><\/h3>\n<p>What is the code doing?<br \/>\nAll the code contain <strong>variables, loops <\/strong>and<strong> boolean <\/strong>values<strong>.<\/strong> This a really clear way of explaining boolean in a simple physical way. By using code and push buttons \u00a0why not use it\u00a0your classroom as a buzzer or instead of you asking the class to be quiet. Make your own teaching voice assistatn. This project could be enhanced further by having appropriate animation\u00a0that are triggered when the buttons are pressed. A possible fun way to make their own music \/ musical instruments. \u00a0Create game controller using the push buttons, sounds and game animation.<\/p>\n<h2><span style=\"color: #000080;\">Wrap Up<\/span><\/h2>\n<p>Show case each &#8216;groups&#8217; work and ask each one what was the most challenging \/ interesting thing about this project.<\/p>\n<p>Ask the students what could this new device be used for and what enhancements\/ changes could the make to make it &#8216;better&#8217; for them?<\/p>\n<h4>Assessment<\/h4>\n<p>Give the student a copy of the Standards\/ Programme of Study \/ State Level Content Standards. 1)\u00a0The students, in their groups, should select (tick or colour- in) all the points that they feel the project covers.\u00a02) Get the students to mark themselves as a group on wether or not the partially or fully achieved each point.\u00a03) Mark themselves individually.\u00a0This type of activity is really useful in getting the students to understand how you as an educator have evidence their learning and progression.<\/p>\n<p>Using the pseudo code\/ animations you will be able to see what the students actually understand about the project and relate this back to the assessment criteria\/ standards.<\/p>\n<p>Below will find the curricular mapping for UK, USA and AUS\/NZ<\/p>\n<p><span style=\"color: #000080;\"><strong>Curriculum Mapping:<\/strong><\/span><br \/>\n<strong><span style=\"color: #000080;\">UK Keystage 3 \/ 4<\/span><\/strong><\/p>\n<p>design, use and evaluate computation abstractions hat model the state and behaviour of real-world problems and physical systems.<\/p>\n<p>understand several key algorithms that reflect computational thinking, such as ones for sorting and searching; use logical reasoning to compare the utility of alternative algorithms for the same problem<\/p>\n<p>use programming languages\u00a0(graphical), to solve a variety of computational problems; make appropriate use of data structures such as lists, tables or arrays; design and develop modular programs that use procedures or functions<\/p>\n<p>understand simple Boolean logic [such as AND, OR and NOT]\u00a0and some of its uses in circuits and programming; understand how numbers can be\u00a0represented\u00a0in binary, and be able to carry out\u00a0simple\u00a0operations on binary numbers [for example, binary addition, and\u00a0conversation\u00a0between binary and\u00a0decimal<\/p>\n<p>undertake creative projects that involve selecting, using, and combining multiple applications, preferably across a range of devices, to achieve challenging goals, including collecting and analysing data and meeting the needs of known users.<\/p>\n<p>develop their capability, creativity and knowledge in computer science, digital media and information technology.<\/p>\n<p>develop and apply their analytic, problem-solving, design, and computational thinking skills.<\/p>\n<p><span style=\"color: #000080;\"><strong>USA<\/strong><\/span><br \/>\n<a href=\"http:\/\/artofcs-123.appspot.com.storage.googleapis.com\/USA_Mapped_to_CommonCoreStandardsNew-copy.pdf\">Project mapped to commoncore<\/a><br \/>\n<iframe src=\"\/\/www.youtube.com\/embed\/9IRB454B-5M?rel=0\" width=\"640\" height=\"360\" frameborder=\"0\" allowfullscreen=\"allowfullscreen\"><\/iframe><\/p>\n<h4><span style=\"color: #000080;\">AUS\/NZ<\/span><\/h4>\n<p><strong>Digital Technologies knowledge and understanding<\/strong><br \/>\n6.1 Investigate the main components of common digital systems, their basic functions and interactions and how such digital systems may connect together to form networks to transmit data<br \/>\n<strong>Digital Technologies processes and production skills<\/strong><br \/>\n6.4 Define problems in terms of data and functional requirements, and identify features similar to previously solved problems<br \/>\n6.9 Manage the creation and communication of ideas and information including online collaborative projects, applying agreed ethical, social and technical protocols<br \/>\n8.10 Create and communicate interactive ideas and information collaboratively (online), taking into account social contexts<br \/>\n8.11 Plan and manage projects, including tasks, time and other resources required, considering safety and sustainability<br \/>\n<strong>Design and Technologies knowledge and understanding<\/strong><br \/>\n6.2 Investigate how forces or electrical energy can control <strong>movement<\/strong>, <strong>sound<\/strong> or light in a designed product or system<br \/>\n8.3 Analyse how motion, force and energy, are used to manipulate and control electromechanical systems when designing simple, engineered solutions<br \/>\n<strong>Design and Technologies processes and production skills<\/strong><br \/>\n6.8 Apply safe procedures when using a variety of materials, components, tools, equipment and techniques to make designed solutions<br \/>\n8.9 Effectively and safely use a broad range of materials, components, tools, equipment and techniques to make designed solutions<br \/>\n4.9 Plan a sequence of production steps when making designed solutions individually and collaboratively<br \/>\n6.10 Develop project plans that include consideration of resources when making designed solutions individually and collaboratively<br \/>\n8.11 Use project management processes individually and collaboratively to coordinate production of designed solutions<\/p>\n","protected":false},"excerpt":{"rendered":"<p>NOTE: Scratch GPIO is being Updated at the time of writing. \u00a0(Lesson will be updated once software is released) Link to main project page Overview: This is a Scratch\u00a0\u00a0GPIO\u00a0coding project using the RPi and\u00a0Push Buttons\u00a0on the duration of your lesson&hellip;<\/p>\n","protected":false},"author":3,"featured_media":0,"parent":0,"menu_order":0,"comment_status":"closed","ping_status":"closed","template":"","meta":[],"_links":{"self":[{"href":"http:\/\/www.readysaltedcode.org\/wp-json\/wp\/v2\/pages\/1613"}],"collection":[{"href":"http:\/\/www.readysaltedcode.org\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"http:\/\/www.readysaltedcode.org\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"http:\/\/www.readysaltedcode.org\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"http:\/\/www.readysaltedcode.org\/wp-json\/wp\/v2\/comments?post=1613"}],"version-history":[{"count":0,"href":"http:\/\/www.readysaltedcode.org\/wp-json\/wp\/v2\/pages\/1613\/revisions"}],"wp:attachment":[{"href":"http:\/\/www.readysaltedcode.org\/wp-json\/wp\/v2\/media?parent=1613"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}